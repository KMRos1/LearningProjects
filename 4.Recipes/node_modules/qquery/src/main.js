import {
    isString,
    isInstanceOf,
    arrFrom,
    forEach,
} from "lightdash";
import {
    twoWays,
    twoWaysMultiple
} from "./lib/patterns";
import {
    toPixels,
} from "./lib/css";

/**
 * QQuery class
 *
 * @class
 * @extends Array
 */
const QQuery = class extends Array {
    /**
     * @constructor
     * @param {string|Node|NodeList} query
     * @param {Node} [context=document]
     * @returns {QQuery}
     */
    constructor(query, context = document) {
        let matches;
        super();

        /**
         * Flow:
         *  Is String? -> query match
         *  Is Node? -> use as single match
         *  Is NodeList? -> use as full match
         *  Else -> throw
         */
        if (isInstanceOf(query, Node)) {
            matches = [query];
        } else if (isInstanceOf(query, NodeList)) {
            matches = arrFrom(query);
        } else {
            matches = arrFrom(context.querySelectorAll(query));
        }

        // Pushes items to instance
        forEach(matches, match => {
            this.push(match);
        });
    }
    each(fn) {
        /**
         * For some reason jQuery loops with [index,item] instead of [item,index]
         */
        forEach(this, (item, index) => {
            fn(index, item);
        });

        return this;
    }
    html(val = null) {
        return twoWays(
            this,
            val,
            item => item.innerHTML,
            (item, val) => item.innerHTML = val
        );
    }
    text(val = null) {
        return twoWays(
            this,
            val,
            item => item.textContent,
            (item, val) => item.textContent = val
        );
    }

    val(val = null) {
        return twoWays(
            this,
            val,
            item => item.value,
            (item, val) => item.value = val
        );
    }
    width(val = null) {
        return twoWays(
            this,
            val,
            item => item.clientWidth,
            (item, val) => item.style.width = toPixels(val)
        );
    }
    height(val = null) {
        return twoWays(
            this,
            val,
            item => item.clientHeight,
            (item, val) => item.style.height = toPixels(val)
        );
    }
    attr(key, val = null) {
        return twoWaysMultiple(
            this,
            key,
            val,
            (item, key) => item.getAttribute(key),
            (item, key, val) => item.setAttribute(key, val)
        );
    }
    data(key, val = null) {
        return twoWaysMultiple(
            this,
            key,
            val,
            (item, key) => item.dataset[key],
            (item, key, val) => item.dataset[key] = val
        );
    }
    css(key, val = null) {
        return twoWaysMultiple(
            this,
            key,
            val,
            (item, key) => item.style.getPropertyValue(key),
            (item, key, val) => item.style.setProperty(key, val)
        );
    }
    hasClass(key) {
        return this.every(item => item.classList.contains(key));
    }
    addClass(key) {
        forEach(this, item => {
            item.classList.add(key);
        });

        return this;
    }
    removeClass(key) {
        forEach(this, item => {
            item.classList.remove(key);
        });

        return this;
    }
    toggleClass(key) {
        forEach(this, item => {
            item.classList.toggle(key);
        });

        return this;
    }
    on(event, fn) {
        forEach(this, item => {
            item.addEventListener(event, fn, false);
        });

        return this;
    }
    off(event, fn) {
        forEach(this, item => {
            item.removeEventListener(event, fn, false);
        });

        return this;
    }
    ready(fn) {
        //cannot be registered with other event shorthands because method name is not the event name
        return this.on("DOMContentLoaded", fn);
    }
};

//Bind default events as shorthand methods
"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" ").forEach(eventName => {
    QQuery.prototype[eventName] = function (fn) {
        return this.on(eventName, fn);
    };
});

/**
 * QQuery constructor called as function
 *
 * @param {string|Node|NodeList} query
 * @param {Node} context
 * @returns {QQuery}
 */
const $ = (query, context) => new QQuery(query, context);

export default $;
